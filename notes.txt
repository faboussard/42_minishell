////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                                                            //
//               COMMENTAIRES EXTRAITS ET GARDÉS DES FICHIERS                 //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////// MAIN.C //////////////////////////////////////

//if (m->list_envp == NULL) // check on unset tout avec pipe et sans pipe
//	return ;
// --> La list_envp doit au moins contenir _= /usr/bin/env

// minishell->user_input = ft_strtrim(minishell->user_input, "\"");
/*
	Ma gestion des protections malloc est alambiquée mais doit fonctionner :
	Si temp N'est PAS NULL, alors on alloue minishell->user_input.
	Si minishell->user_input est NULL, l'un des deux mallocs a échoué, donc exit
	(d'ailleurs, plutôt juste un message d'erreur + un return
	sans fermer tout le minishell serait bien ici je pense)
	Et toujours des free_safely_str avant de vérifier le malloc pour ne
 	pas exit/return avant d'avoir free un malloc

 void	format_input(t_minishell *m, char **av)
{
	int			i;
	char		*temp;

	m->user_input = ft_calloc(1, 1);
	if (m->user_input == NULL)
		exit_msg(m, "Malloc failed at format_input", ENOMEM);
	i = 0;
	while (av[i])
	{
		temp = ft_strjoin(m->user_input, av[i]);
		free_safely_str(&(m->user_input));
		if (temp != NULL)
			m->user_input = ft_strdup(temp);
		free_safely_str(&(temp));
		if (m->user_input == NULL)
			exit_msg(m, "Malloc failed at format_input", ENOMEM);
		i++;
	}
	temp = ft_strdup(m->user_input);
	free_safely_str(&(m->user_input));
	if (temp != NULL)
		m->user_input = ft_strtrim(temp, "\"");
	free_safely_str(&temp);
	if (m->user_input == NULL)
		exit_msg(m, "Malloc failed at format_input", ENOMEM);
}*/

////////////////////////////////// CD //////////////////////////////////////////

/*
//	struct stat	st;
 *
 * ft_realpath(m, dir);
	if (ft_strncmp(m->target_path, ".", 1) && stat(m->target_path, &st) == -1)
	{
		print_cmd_perror("cd", dir, errno);
		return (1);
	}*/
//	//dprintf(2, "m->target_path = %s\n", m->target_path);
/*	if (contains_only_charset(dir, "./"))
		return (go_into_directory(m, m->target_path));
	if (ft_strncmp(dir, ".", 1) && !(S_ISDIR(st.st_mode)))
		// if doesn't begin with . and is not dir
		print_cmd_perror("cd", dir, ENOTDIR);
	else
	return (go_into_directory(m, dir));
 */
// //dprintf(2, "bash: cd: %s: Not a directory\n", dir);
// if (access(dir, F_OK | X_OK))
// {
// 	perror("access");
// }
bool	too_many_args(char **cmd_table)
{
	if (cmd_table[1] != NULL && cmd_table[2] != NULL)
	{
		ft_putendl_fd("minishell: cd: too many arguments", 2);
		return (1);
	}
	return (0);
}
if (too_many_args(cmd_table))
return (1);
/*
http://pwet.fr/man/linux/commandes/posix/cd/
cd ../../../
char		*getcwd(char *buf, size_t size);
La fonction getcwd() copie le chemin d'accès absolu du répertoire de travail courant dans la chaîne pointée par buf,
	qui est de longueur size.
Si le chemin du répertoire en cours nécessite un tampon plus long que size octets,
	la fonction renvoie NULL,
	et errno contient le code d'erreur ERANGE. Une application doit détecter cette erreur et allouer un tampon plus grand si besoin est.
Si buf est NULL, le comportement de getcwd() est indéfini.
Dans quels cas getcwd peut echouer ?

`getcwd()` est une fonction de la bibliothèque standard C qui renvoie le chemin absolu du répertoire courant. Cette fonction peut échouer dans les cas suivants :

1. Le tampon fourni n'est pas assez grand pour contenir le chemin complet du répertoire courant. Dans ce cas,
	`getcwd()` renvoie `NULL` et définit `errno` à `ERANGE`.
2. Le répertoire courant a été supprimé ou déplacé. Dans ce cas,
	`getcwd()` renvoie `NULL` et définit `errno` à `ENOENT`.
mbernard@z4r9p5:~/test/test/test$ cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
3. Le processus n'a pas les permissions nécessaires pour accéder au répertoire courant ou à l'un de ses parents. Dans ce cas,
	`getcwd()` renvoie `NULL` et définit `errno` à `EACCES` ou `EPERM`.
mbernard@z4r9p5:~/test/test$ cd ..
bash: cd: ..: Permission denied
4. Le système de fichiers est en mode lecture seule ou le processus a atteint sa limite de ressources. Dans ce cas,
	`getcwd()` renvoie `NULL` et définit `errno` à `EIO` ou `ENOMEM`.
5. Le chemin du répertoire courant contient des liens symboliques circulaires. Dans ce cas,
	`getcwd()` peut renvoyer `NULL` et définir `errno` à `ELOOP`.
mbernard@z4r9p5:~/test/test/test$ cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory

int			chdir(const char *path);
chdir() remplace le répertoire de travail courant du processus appelant par celui indiqué dans le chemin path.
https://www.thegeekstuff.com/2010/10/linux-error-codes/
int			access(const char *pathname, int mode);
access() vérifie si le processus appelant peut accéder au fichier pathname. Si pathname est un lien symbolique,
	il est déréférencé.

Le mode indique la (les) vérification(s) d'accessibilité à effectuer et est soit la valeur F_OK,
	soit un masque constitué par un OU binaire « | » entre les valeurs R_OK,
	W_OK et X_OK. F_OK R_OK, W_OK et X_OK servent à tester respectivement,
	si le fichier existe, la lecture, l'écriture et l'exécution du fichier.

Le test est effectué avec les UID et GID réels du processus appelant,
	plutôt qu'avec les IDs effectifs qui sont utilisés lorsque l'on tente une opération (par exemple,
	open(2)) sur le fichier. Ceci permet aux programmes Set-UID de déterminer les autorisations de l'utilisateur ayant invoqué le programme.

Si le processus appelant est privilégié (c'est-à-dire, son UID réel est nul),
	une vérification X_OK sur un fichier régulier réussit même si le fichier n'a aucun bit d'exécution positionné.

d-w------- 2 mbernard 2023_lyon   6 Apr 10 11:04 dossier
dr--r--r-- 2 mbernard 2023_lyon   6 Apr 10 11:04 dossier
bash: cd: dossier/: Permission denied
d--x--x--x 2 mbernard 2023_lyon   6 Apr 10 11:04 dossier
--> fonctionne uniquement si permission d'execution :
mbernard@z4r9p5:~$ chmod 777 dossier
mbernard@z4r9p5:~$ chmod -x dossier
mbernard@z4r9p5:~$ cd dossier/
bash: cd: dossier/: Permission denied
drw-rw-rw- 2 mbernard 2023_lyon   6 Apr 10 11:04 dossier
bernard@z4r9p5:~$ cd fichier
bash: cd: fichier: Not a directory
Bash verifie que c'est un repertoire avant de verifier les droits :
mbernard@z4r9p5:~$ touch fichier
mbernard@z4r9p5:~$ chmod 000 fichier
mbernard@z4r9p5:~$ cd fichier
bash: cd: fichier: Not a directory
mbernard@z4r9p5:/home/mbernard$ cd
bash: cd: HOME not set
mbernard@z4r9p5:/home/mbernard$ echo $?
1
*/